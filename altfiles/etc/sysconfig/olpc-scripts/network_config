#!/usr/bin/python

#  Copyright 2008, One Laptop per Child
#  Authors: John Watlington, Martin Langhoff
#  License: GPLv2
#
# network_config
#
# This script is run
#
#   - in %post for installs / upgrades
#
#   - manually when the role of the machine is set or changed
#
# Goals
#
# - Set a "server number" role for the machine for 
#   environemtns with many 'school server' machines.
#
#   This value is stored in /etc/sysconfig/xs_server_number
#   (in early releases as /etc/sysconfig/server_number)
#
#   If no role # is defined, it will assume '1'.
#
#   Command Line to set:
#        network_config <server_number>
#
# - Print the network config settings for that role
#   these config settings get stored in 
#   /etc/sysconfig/xs_network_settings
#
#   Invoke with no parameters to get the settings.
#
# The server number should be unique to the school network this server
# will be part of.  When run at first boot, this number is always 1.
# Server numbers do not have to be sequential, and currently only
# numbers 1 through 8 are currently supported.
#

import commands, syslog, os, sys
from optparse import OptionParser

#  Subnet prefix
#  This is the first sixteen bits of the IP address used for the
#  school LAN.   If changed, the auxiliary_config and principal_config
#  scripts should also be changed.   The trailing '.' is important.
SUBNET_PREFIX="172.18."

#  Name of the file used to store the server number
SERVER_NUM_FILE  = '/etc/sysconfig/xs_server_number'
SERVER_CONF_FILE = '/etc/sysconfig/xs_network_config'

def print_mesh_br( M_num, server_num ):
    """writes network config values for a mesh I/F ethernet I/F

    Takes two numbers, indicating the suffix of the mesh (M_num) and the
    server number.
    """
    M = str( M_num )

    subnet = 10 + (8 * (server_num-1)) + (2 * M_num)
    subnet_str = str(subnet)
    print_conf('XS_MSHBOND'+M+'_IPADDR='    + SUBNET_PREFIX + subnet_str + '.1')
    print_conf('XS_MSHBOND'+M+'_NETWORK='   + SUBNET_PREFIX + subnet_str + '.0')
    print_conf('XS_MSHBOND'+M+'_BROADCAST=' + SUBNET_PREFIX + str(subnet + 1) + '.255')

def print_conf( str ):
    """ Writes to the configuration file, if appropriate"""

    global netcfg
    #global opts

    if opts.verbose or opts.dryrun:
        print str

    if not opts.dryrun:
        netcfg.write(str + "\n")

# globals
netcfg = False # filehandle
#opts = False   # options


###########################################################################
##
##   This is the actual script
##
if __name__ == "__main__":


    parser = OptionParser(usage='%prog [options] servernumber')
    parser.add_option('-d', '--dry-run', dest='dryrun',  action='store_true')
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true')
    (opts, args) = parser.parse_args()

    if opts.dryrun:
        opts.verbose=True

    #  Get the server number from the command line and check it for sanity
    if len(args) > 1:
       syslog.syslog( 'Incorrect number of arguments' )
       exit(1)

    # Default - and set the scope
    server_num = 1

    if len(args) == 1:
        server_num = int(args[0])
        if (server_num < 1) or (server_num > 8):
            syslog.syslog( 'Server number (%d) out of range' % server_num )
            exit(1)

        if not opts.dryrun:
            cfg_file = open(SERVER_NUM_FILE, 'w')
            cfg_file.write(str(server_num))
            cfg_file.close()
            syslog.syslog('Configured the system to perform XS role ' + str(server_num))
            if opts.verbose:
                print ('Configured the system to perform XS role ' + str(server_num))

    else:
        if os.path.exists(SERVER_NUM_FILE):
            cfg_file = open(SERVER_NUM_FILE, 'r')
            server_num = cfg_file.read()
            cfg_file.close()
            server_num = int(server_num.strip())
            if opts.verbose:
                print "Read from existing conf role " + str(server_num)

        else:
            msg = SERVER_NUM_FILE + ' does not exist. Defaulting to 1.'
            syslog.syslog(msg)
            sys.stderr.write(msg+"\n")

            if not opts.dryrun:
                cfg_file = open(SERVER_NUM_FILE, 'w')
                cfg_file.write(str(server_num))
                cfg_file.close()
                syslog.syslog('Configured the system to perform XS role ' + str(server_num))
                if opts.verbose:
                    print ('Configured the system to perform XS role ' + str(server_num))

    if not opts.dryrun:
        netcfg=open(SERVER_CONF_FILE, 'w')

    print_conf("#")
    print_conf("# Generated by network_config")
    print_conf("# do not edit by hand ")
    print_conf("#")
    print_conf("XS_SERVER_NUM=" + str(server_num))
    ##
    ##
    ## eth0 is WAN on Server 1 so it will be locally configured or using DHCP
    ##      - on the other servers it will be LAN
    ##
    if server_num != 1:
        print_conf('XS_ETH0_IPADDR=172.18.1.' + str(server_num))
    else: 
        ##
        ## eth1 is LAN on Server 1 - where we want it to also have an eth1:1 
        ##      - on the other servers it ill be unused
        ##
        print_conf('XS_LANBOND0_IPADDR=172.18.0.'  + str(server_num))
        print_conf('XS_LANBOND01_IPADDR=172.18.1.' + str(server_num))

    ##
    ## The bridges for the MSH devices
    ##
    # TODO : we might need to add a special bridge for server 1
    #        to support early activation
    for meshbr in range(0,3):
        print_mesh_br(meshbr, server_num)

    if not opts.dryrun:
        netcfg.close()
