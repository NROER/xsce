#!/bin/bash +x
# collect here all the separate setup independent changes to stock XO software
#  -- ordered alphabetically
# usage: source this file -- for example to install a WWW server:
#===============================================================================
#!/bin/bash
#examble install script
#source /usr/bin/xs-setup-functions
#do-first
#httpd yes
#do-last
#===============================================================================

set -x -e -u

DESTDIR=""
CFGDIR=/usr/share/xs-config/cfg
CFGFUNCTIONS=/etc/sysconfig/olpc-scripts/functions
MARKER=/.olpcxs-configured
LOG=/var/log/xs-setup.log
POSTGRESSDIR=/library/pgsql-xs
SETUPSTATEDIR=/etc/sysconfig/olpc-scripts/setup.d/installed
DEFAULTUSER='admin'
DEFAULTPASSWORD='12admin'
ISXO=`[ -f /proc/device-tree/mfg-data/MN ] && echo 1 || echo 0`
YUMERROR=10

function activity-server()
{
	case "$1" in
    "yes")
        yum -y install  xs-activity-server 2>&1 | tee -a $LOG
        touch SETUPSTATEDIR/activity-server
        #execute the setup script
        /etc/sysconfig/olpc-scripts/setup.d/xs-activity-server
        ;;
    "no")
        rm $SETUPSTATEDIR/activity-server
        ;;
    esac
}

function avahi()
{
	case "$1" in
	"yes")
        yum -y install nss-mdns avahi avahi-tools avahi-ui 2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi
		systemctl enable avahi-daemon.service 2>&1 | tee -a $LOG
        touch $SETUPSTATEDIR/avahi
        ;;
	"no")
		systemctl disable avahi-daemon.service 2>&1 | tee -a $LOG
        rm $SETUPSTATEDIR/avahi
        ;;
	esac
}

function dhcpd()
{
	case "$1" in
	"yes")
        yum -y install dhcp 2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi
	systemctl enable dhcpd.service 2>&1 | tee -a $LOG
	systemctl start dhcpd.service 2>&1 | tee -a $LOG
        touch $SETUPSTATEDIR/dhcpd
        ;;
	"no")
		systemctl disable dhcpd.service 2>&1 | tee -a $LOG
        systemctl stop dhcpd.service 2>&1 | tee -a $LOG
        rm $SETUPSTATEDIR/dhcpd
        ;;
	esac
}

function etckeeper-if-selected()
{
    if [ -e $SETUPSTATEDIR/etckeeper && $# -gt 1]; then
        set +e
        etckeeper commit -m $2
        set -e
    fi
}

function set-etckeeper()
{
	case "$1" in
	"yes")
        if [ ! -d /etc/.git ]; then
            pushd /etc
            yum -y install etckeeper
            if [ $? -ne 0 ] ; then
                echo "\n\nYum returned an error\n\n" | tee -a $LOG
                exit $YUMERROR
            fi
            etckeeper init
            etckeeper commit -m "Initial checkin"
            git gc
            popd
        fi

        if [ ! -e $SETUPSTATEDIR/etckeeper ]; then
            touch $SETUPSTATEDIR/etckeeper
        fi
        ;;
	"no")
        if [ -e $SETUPSTATEDIR/etckeeper ]; then
            rm $SETUPSTATEDIR/etckeeper
        fi
        ;;
	esac
}

function ejabberd()
{
	case "$1" in
	"yes")
		yum -y install ejabberd 2>&1 | tee -a $LOG
		if [ $? -ne 0 ] ; then
		    echo "\n\nYum returned an error\n\n" | tee -a $LOG
		    exit $YUMERROR
		fi
		# and set it to autostart
		systemctl enable ejabberd-xs.service 2>&1 | tee -a $LOG
		systemctl start ejabberd-xs.service 2>&1 | tee -a $LOG
		touch $SETUPSTATEDIR/ejabberd
		;;
	"no")
		systemctl disable ejabberd.service 2>&1 | tee -a $LOG
		rm $SETUPSTATEDIR/ejabberd
		;;
		esac
}

function gateway()
{
	case "$1" in
	"yes")
        cp /etc/sysconfig/olpc-scripts/iptables-xs.in /etc/sysconfig/olpc-scripts/iptables-xs
        cp /etc/sysconfig/olpc-scripts/ip6tables-xs.in /etc/sysconfig/olpc-scripts/ip6tables-xs
        cp /etc/sysconfig/olpc-scripts/firewall-xs.in /etc/sysconfig/olpc-scripts/firewall-xs

        # either enable the service or create the file not both
        ln -sf $CFGDIR/etc/systemd/system/iptables.service $DESTDIR/etc/systemd/system
        #systemctl enable iptables.service

        systemctl start iptables.service
        # systemd has a check for exist /etc/sysconfig/iptables - so ensure that it exists
        /etc/sysconfig/iptables-config
        touch $SETUPSTATEDIR/gateway
        ;;
	"no")
        rm $SETUPSTATEDIR/gateway
        /etc/sysconfig/olpcs-scripts/firewall-xs
        squid no
        ;;
	esac
}

function httpd()
{
	case "$1" in
	"yes")
		yum -y install httpd php  2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi
        cp -p /etc/httpd/conf/httpd-xs.conf.in /etc/httpd/conf/httpd-xs.conf
		# Choose a config depending on memory
		MEMSIZE=$(grep '^MemTotal' /proc/meminfo | grep -oP '\d+')
		CONFMEM=256m
		# Note: the sizes are rounded to a lower value
		#       as they are usually reported a tad lower than the
		#       "proper" MB value in bytes (video cards often steal RAM!).
		if [ $MEMSIZE -gt  500000 ]; then
		    CONFMEM=512m
		fi
		if [ $MEMSIZE -gt 1000000 ]; then
		    CONFMEM=1024m
		fi
		if [ $MEMSIZE -gt 2000000 ]; then
		    CONFMEM=2048m
		fi
		#update the httpd.conf file with this information
		sed  's/@@CONFMEM@@/$CONFMEM/' /etc/httpd/conf/httpd-xs.conf
		etckeeper-if-selected "modified /etc/httpd/conf/httpd-xs.conf"
        systemctl start httpd.service 2>&1 | tee -a $LOG
		systemctl enable httpd.service 2>&1 | tee -a $LOG

        # now install the xs - client html/php code

        touch $SETUPSTATEDIR/httpd
		;;
	"no")
		systemctl disable httpd.service 2>&1 | tee -a $LOG
        rm $SETUPSTATEDIR/httpd
		;;
	esac
}

function idmgr()
{
	case "$1" in
	"yes")
        yum -y install idmgr ds-backup-server \
                xs-rsync xinetd 2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi

        # set up the sqlite database for idmgr
        /etc/sysconfig/olpc-scripts/setup.d/idmgr

        # long term, change the idmgr package
        cp /etc/init.d/idmgr /usr/libexec/idmgr.init

        # execute the xs-rsync setup script
        /etc/sysconfig/olpc-scripts/setup.d/xs-rsync

        # setup ds-backup symlinks to config locations
        /etc/sysconfig/olpc-scripts/setup.d/ds-backup

        cp /etc/systemd/system/idmgr.service.in /etc/systemd/system/idmgr.service

		systemctl enable idmgr.service 2>&1 | tee -a $LOG
		systemctl start idmgr.service 2>&1 | tee -a $LOG
		systemctl enable xinetd.service 2>&1 | tee -a $LOG
		systemctl start xinetd.service 2>&1 | tee -a $LOG
        touch $SETUPSTATEDIR/idmgr
        ;;
	"no")
		systemctl disable idmgr.service 2>&1 | tee -a $LOG
        rm $SETUPSTATEDIR/idmgr
        ;;
	esac
}

function mlocate()
{
	case "$1" in
	"yes")
        yum -y install mlocate 2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi
        updatedb
        touch $SETUPSTATEDIR/mlocate
        ;;
	"no")
        rm $SETUPSTATEDIR/mlocate
        ;;
	esac
}

function moodle()
{
	case "$1" in
	"yes")
        yum -y install moodle 2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi
		systemctl enable moddle.service 2>&1 | tee -a $LOG
        touch $SETUPSTATEDIR/moodle
        ;;
	"no")
		systemctl disable moddle.service 2>&1 | tee -a $LOG
        rm $SETUPSTATEDIR/moodle
        ;;
	esac
}

function moodle-xs()
{
	case "$1" in
	"yes")
        yum -y install moodle-xs 2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi

	# execute the moodle startup script
	/usr/libexec/moodle-xs-init start 2>&1 | tee -a $LOG
	touch $SETUPSTATEDIR/moodle-xs
	;;

	"no")
	/usr/libexec/moodle-xs-init stop 2>&1 | tee -a $LOG
	rm $SETUPSTATEDIR/moodle-xs
	;;
	esac
}

function named()
{
	case "$1" in
	"yes")
        yum -y install bind bind-utils 2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi
        # if xs data files are installed before bind, named user doesn't exist,
        # and group ownership is set to root, which user named cannot read
        if [ -d /var/named-xs ]; then
            chgrp -R named /var/named-xs
        fi
	systemctl enable named.service 2>&1 | tee -a $LOG
        systemctl start named.service 2>&1 | tee -a $LOG
	touch $SETUPSTATEDIR/named
	touch $SETUPSTATEDIR/resolvconf
        ;;
	"no")
		systemctl disable named.service 2>&1 | tee -a $LOG
        # let the dhclinet control the name resolution normally
        rm /etc/sysconfig/olpc-scripts/resolv.conf
        rm $SETUPSTATEDIR/named
        ;;
	esac
}

function pathagar()
{
	case "$1" in
	"yes")
        httpd yes
        yum -y mod_python mod_wsgi  python-django Django \
                python-setuptools sqlite django-tagging
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi
        adduser bookserver
        cd /home/bookserver
        git clone git://github.com/johnsensile/django-sendfile.git
        git clone git://github.com/manuq/pthagar
        python setup.py install
        rm -rf /home/bookserver/django-sendfile
        chown -R apache:apache /home/bookserver/pathagar
        chmod u-w -R /home/bookserver/pathagar
        chmod g+w -R /home/bookserver/pathagar
        cd /home/bookserver/pathagar
        ln -fs $CFGDIR/etc/httpd/conf.d/pathagar.conf \
                $DESTDIR/etc/httpd/conf.d/pathagar.conf
        chmod u+w database.db static_media books
        touch $SETUPSTATEDIR/pathagar
        ;;
	"no")
        rm $SETUPSTATEDIR/pathagar
        ;;
	esac
}

function postgresql()
{
	case "$1" in
	"yes")
        yum -y install postgresql postgresql-server 2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi
        cp -f $CFGDIR/etc/systemd/system/postgresql-xs.service \
            $DESTDIR/lib/systemd/system/
        # systemctl does not enable by linking a link, hence above cp
		systemctl enable postgresql-xs.service 2>&1 | tee -a $LOG

		# Pg - prime the DB if needed.
		if [ ! -e ${POSTGRESSDIR}/PG_VERSION ];then
            # /etc/init.d/pgsql-xs initdb -- this was used before systemd
            # postgresql-setup initdb need to move this edit upstream FIXME
            mkdir -p /library/pgsql-xs
            chown -R postgres:postgres /library/pgsql-xs/
            sed -i -c "s/--auth='ident\"'/--auth='ident' --encoding='UTF8'\"/" \
                                    /usr/bin/postgresql-setup
			/usr/bin/postgresql-setup  initdb postgresql-xs
		fi

		# and set it to autostart
		systemctl start postgresql-xs.service 2>&1 | tee -a $LOG
        touch $SETUPSTATEDIR/postgresql
		;;
	"no")
		systemctl disable postgresql-xs.service 2>&1 | tee -a $LOG
        rm $SETUPSTATEDIR/postgresql
		;;
	esac
}

function squid()
{
	case "$1" in
	"yes")
        yum -y install squid 2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi
        # create the cache directories
        squid -z
        ## Update flag for httpd cache
        if [ ! -e /etc/sysconfig/xs_httpcache_on ]; then
            touch /etc/sysconfig/xs_httpcache_on
            etckeeper-if-selected 'xs-setup force-create httpcache flag'
        fi
        systemctl enable squid.service 2>&1 | tee -a $LOG
        systemctl start squid.service 2>&1 | tee -a $LOG
        # need to set up iptables to forward port 80 queries

        touch $SETUPSTATEDIR/squid
        ;;
    "no")
        systemctl disable squid.service 2>&1 | tee -a $LOG
        rm $SETUPSTATEDIR/squid
        ;;
    esac
}

function vnc()
{
	case "$1" in
	"yes")
        yum -y install tigervnc-server novnc 2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi
        yum -y groupinstall XFCE  2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi
        # or yum install x11vnc-javaviewers | tee -a $LOG
        cp -p /lib/systemd/system/vncserver\@.service /etc/systemd/system
        sed -i -c 's/<USER>/$DEFAULTUSER/' /etc/systemd/system/vncserver\@.service

        # start the websocket service (part of the novnc package)
        systemctl enable vncserverweb.service 2>&1 | tee -a $LOG
        mkdir -m 755 -p /home/$DEFAULTUSER/.vnc
        ln -sf $CFGDIR/etc/systemd/system/* $DESTDIR/etc/systemd/system
        ln -sf $DESTDIR/etc/systemd/system/vncserver\@.service \
            $DESTDIR/etc/systemd/system/multi-user.target.wants/vncserver\@\:1.service
        cp $CFGDIR/etc/sysconfig/vnc/xstartup /home/$DEFAULTUSER/.vnc/
        chown -R $DEFAULTUSER:$DEFAULTUSER /home/$DEFAULTUSER/.vnc
        echo "$DEFAULTPASSWORD" | vncpasswd -f > \
                    /home/$DEFAULTUSER/.vnc/passwd
        chmod 600 /home/$DEFAULTUSER/.vnc/passwd
		systemctl enable vncserver\@\:1.service 2>&1 | tee -a $LOG
        systemctl start vncserver\@\:1.service 2>&1 | tee -a $LOG
        systemctl start vncserverweb.service 2>&1 | tee -a $LOG
        touch $SETUPSTATEDIR/vnc
        ;;
	"no")
		systemctl disable vncserver\@.service 2>&1 | tee -a $LOG
        rm $SETUPSTATEDIR/vnc
        ;;
	esac
}

function webdav()
{
	case "$1" in
	"yes")
        cp /etc/httpd/conf.d/webdav.conf.in /etc/httpd/conf.d/webdav.conf
        yum -y install cadaver
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi
        mkdir -p /library/webdav
        chown apache:apache /library/webdav
        htpasswd -cb /etc/httpd/webdav.users.pwd $DEFAULTUSER $DEFAULTPASSWORD
        chown apache:apache /etc/httpd/webdav.users.pwd
        touch $SETUPSTATEDIR/webdav
        ;;
	"no")
        rm /etc/httpd/conf.d/webdav.conf
        rm $SETUPSTATEDIR/webdav
        ;;
	esac
}

function yum-etckeeper()
{
	case "$1" in
	"yes")
        if [ ! -e $SETUPSTATEDIR/etckeeper ]; then
            set-etckeeper yes
        fi
        sed -c -i -e 's/^enabled=0/enabled=1/' /etc/yum/pluginconf.d/etckeeper.conf
        ;;
	"no")
        sed -c -i -e 's/^enabled=1/enabled=0/' /etc/yum/pluginconf.d/etckeeper.conf
        ;;
	esac
}

function xs-security()
{
	case "$1" in
    "yes")
        yum -y install  xs-tools olpc-bios-crypto bitfrost xs-activation 2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi
        touch $SETUPSTATEDIR/xs-security
        ;;
    "no")
        rm $SETUPSTATEDIR/xs-security
        ;;
    esac
}

function do_first()
{
    #things to do the first time -- only once
    if [ -e /home/olpc/xs-setup.log ]
	mv /home/olpc/xs-setup.log /var/log
    fi

    ## Prepare etckeeper database
    if [ ! -e $MARKER ]; then
        pushd /etc

        ###
        ### CLEANUP XS 0.4 to XS 0.5
        ###
        # Remove old configs that are unambiguously old
        OLDCONFIGS="/etc/sysconfig/network-scripts/ifcfg-dummy0
                    /etc/sysconfig/network-scripts/ifcfg-br0
                    /etc/sysconfig/network-scripts/ifcfg-br1
                    /etc/sysconfig/network-scripts/ifcfg-br2  "
        for FPATH in $OLDCONFIGS; do
            if [ -e "${DESTDIR}$FPATH" ];then
               rm -f "${DESTDIR}$FPATH"
            fi
        done
        # Remove ifcfg-ethX files that refer to libertas devices
        # these have been replaced with wmeshX devices
        for FPATH in ${DESTDIR}/etc/sysconfig/network-scripts/ifcfg-eth*; do
            # Here the implicit ls has incorporated $DESTDIR
            if grep -q '^ESSID=\"school-mesh-' "$FPATH" ;then
                rm -f "$FPATH"
            fi
        done
        # remove eth1:1 if it's the 'school server master address'
        FPATH="${DESTDIR}/etc/sysconfig/network-scripts/ifcfg-eth1:1"
        if [ -e "$FPATH" ];then
            if grep -q '^IPADDR=172.18.1.1' "$FPATH" ;then
                rm -f "$FPATH"
            fi
        fi

	# keep yum cache
	sed -i -c 's/keepcache=0/keepcache=1/' /etc/yum.conf
	sed -i -c 's/metadata_expire=7d/metadata_expire=never/' /etc/yum.repos.d/fedora.repo
        sed -i '#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch# a\ exclude=ejabberd' /etc/yum.repos.d/fedora.repo
	sed -i '#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$basearch# a\ exclude=ejabberd' /etc/yum.repos.d/fedora-updates.repo

	# set the network up
	xs-setup-network

        ## Prepare config files
        CFG_TEMPLATES="rsyslog.conf motd.olpc sysctl.conf ssh/sshd_config
        sysconfig/named sysconfig/init sysconfig/squid rssh.conf php.ini
        httpd/conf.d/proxy_ajp.conf httpd/conf.d/ssl.conf"

        for i in $CFG_TEMPLATES; do
            cp -p $i.in $i
        done

        # Load new sysctl.conf settings
        sysctl -p

        #record the config file additions
        etckeeper-if-selected 'Config files copied <file.in> to <file>'

        # Work would be needed to get the XS components playing nice with SELinux, so
        # disable it.
        if selinuxenabled; then
            setenforce 0
            sed -i -e 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config
        fi

        echo "-y" > $DESTDIR/fsckoptions
        ln -sf $CFGDIR/etc/dhcp/dhclient-exit-hooks $DESTDIR/etc/dhcp
        ln -sf $CFGDIR/etc/httpd/conf.d/*.conf $DESTDIR/etc/httpd/conf.d
        ln -sf $CFGDIR/etc/logrotate.d/* $DESTDIR/etc/logrotate.d
        ln -sf $CFGDIR/etc/usbmount/mount.d/* $DESTDIR/etc/usbmount/mount.d
        ln -sf $CFGDIR/etc/profile.d/* $DESTDIR/etc/profile.d

        # sudo doesn't accept symlinks here
        install -m 440 $CFGDIR/etc/sudoers.d/* $DESTDIR/etc/sudoers.d
        install -m 440 $CFGDIR/etc/systemd/system/* $DESTDIR/etc/systemd/system

        # run setup scripts belonging to other packages
        #shopt -s nullglob
        #for i in /etc/sysconfig/olpc-scripts/setup.d/*; do
         #   [ -x $i ] && $i
        #done
        #shopt -u nullglob

        etckeeper-if-selected "disabled selinux, scripts sourced"

        # following packages are the core set of packages installed on all xs servers
        yum -y install  syck rssh mtd-utils acpid  2>&1 | tee -a $LOG
        if [ $? -ne 0 ] ; then
            echo "\n\nYum returned an error\n\n" | tee -a $LOG
            exit $YUMERROR
        fi

        # make a non privileged user, and give her remote access
        if [ ! `grep $DEFAULTUSER /etc/passwd` ]; then
            adduser $DEFAULTUSER
            echo "$DEFAULTPASSWORD" | passwd $DEFAULTUSER --stdin
        fi
        sed -i -c 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        systemctl enable sshd.service
        systemctl restart sshd.service

        etckeeper-if-selected "after installing core packages"

        popd
        
    fi
    echo "do first routine completed" | tee -a $LOG
    date  2>&1 | tee -a $LOG

}

function do-first()
(
    do_first
)

function do-last()
(
    do_last
)

function do_last()
{
    etckeeper-if-selected 'School Server setup changed - do_last'
    echo "do last executed" | tee -a $LOG
    date | tee -a $LOG
    if [ ! -e $MARKER ]; then
        # internally we use /etc/.git as marker for first config run --
        #   --$ MARKER  is available externally
        touch $MARKER
        echo "XS configured; services should be active."
    fi
}

# now source any files ending with .sh in config dir, allow pkgs to shadow these defs
for i in $CFGFUNCTIONS/*.sh ; do
    if [ -r "$i" ]; then
            . "$i" >/dev/null 2>&1
            echo "shell script $i in $CFGFUNCTIONS shadowed setup functions" 2>&1 | tee -a $LOG
    fi
done
