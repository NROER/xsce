#!/bin/bash
#
# ejabberd    Start and stop ejabberd.

# chkconfig: - 40 60
# description: ejabberd
# processname: ejabberd
# pidfile: /var/run/ejabberd.pid

### BEGIN INIT INFO
# Provides: ejabberd
# Required-Start: network
# Required-Stop: network
# Short-Description: Start and stop ejabberd
# Description: A distributed, fault-tolerant Jabber/XMPP server
### END INIT INFO

. /etc/rc.d/init.d/functions

if [ -r /etc/sysconfig/ejabberd ]; then
    . /etc/sysconfig/ejabberd
fi

if [ ! "$CONFIG_FILE" ]; then
    CONFIG_FILE=/etc/ejabberd/ejabberd.cfg
fi

node=`hostname -s`

SYS_DOMAIN_FILE=/etc/sysconfig/xs_domain_name
OUR_DOMAIN_FILE=/etc/sysconfig/ejabberd_domain_name

check_domain_configured() {
    if [ ! -e /etc/sysconfig/xs_domain_name ]; then
	echo "Domain not configured yet" > /dev/stderr
	exit 1;
    fi

    domain=`cat "$SYS_DOMAIN_FILE" `
    if [ "$domain" == "random.xs.laptop.org" ]; then
	echo "Domain not configured yet" > /dev/stderr
	exit 1;
    fi

    hostname=`hostname -f`
    if [ "$hostname" == "localhost.localdomain" ]; then
         echo "Domain not configured yet" > /dev/stderr
    fi

    if [ "$hostname" != "schoolserver.$domain" ]; then
         echo "Domain changed -- restart to enable ejabberd" > /dev/stderr
    fi

    if [ ! -e "$OUR_DOMAIN_FILE" ] || ! cmp "$SYS_DOMAIN_FILE" "$OUR_DOMAIN_FILE" ; then
	update_domain
    fi
}

update_domain() {

    BACKUP_SUFFIX=old

    if [ -e $CONFIG_FILE ]; then
	cp $CONFIG_FILE $CONFIG_FILE.$BACKUP_SUFFIX || exit 1
    fi

    new_name=`cat "$SYS_DOMAIN_FILE"`
    (sed -e s/@@BASEDNSNAME@@/$new_name/ $CONFIG_FILE.in > $CONFIG_FILE.tmp ) && mv $CONFIG_FILE.tmp $CONFIG_FILE || exit 1

    # If we are changing the domain, we must clear the DB.
    if [ -e /var/lib/ejabberd/online_src_created ] ; then
	rm -f /var/lib/ejabberd/online_src_created
    fi
    if [ -d /var/lib/ejabberd/spool/ ]; then
	rm -f /var/lib/ejabberd/spool/*
    fi

    # Mark as done -
    cp "$SYS_DOMAIN_FILE" "$OUR_DOMAIN_FILE"
}

setup_online_srg() {

    if [ -e /var/lib/ejabberd/online_src_created ]; then
	return 0
    fi;

    # give ejabberd a bit of time to startup on XO-1 HW :-)
    sleep 10;

    domain=`cat "$SYS_DOMAIN_FILE"`

    # Note: grep -q exits as soon as the match is found, which ejabberdctl
    # doesn't like. So we send the output to /dev/null instead - more
    # portable too.
    #
    # ejabberdctl should handle SIGPIPE without messing up, but that's
    # a minor problem anyway.
    #
    if ! ejabberdctl srg-list-groups "schoolserver.$domain" | grep '^Online$' > /dev/null ; then
	# ejabberdctl doesn't like spaces in the description field.
	# backslashes work - but escaping is better left alone for now :-)
	ejabberdctl srg-create Online "schoolserver.$domain" \
	    Online "Created_by_ejabberd_init" Online
	[ $? -eq 0 ] || return 1
    fi

    if ! ejabberdctl srg-get-info Online "schoolserver.$domain" | grep '^online_users: true$' > /dev/null ; then
	ejabberdctl srg-user-add '@online@' "schoolserver.$domain" \
	    Online "schoolserver.$domain"
	[ $? -eq 0 ] || return 1
    fi

    # mark success
    touch /var/lib/ejabberd/online_src_created
}

start() {
        echo -n $"Starting ejabberd: "
        if [ "$ULIMIT_MAX_FILES" ]; then
            ulimit -n $ULIMIT_MAX_FILES
        fi

	check_domain_configured

	daemon --user=ejabberd --check=ejabberd \
	    "erl" "-pa @libdir@/ejabberd/ebin \
                   -sname ejabberd \
                   -s ejabberd \
                   -ejabberd config \\\"$CONFIG_FILE\\\" \
                             log_path \\\"/var/log/ejabberd/ejabberd.log\\\" \
                   -sasl sasl_error_logger \\{file,\\\"/var/log/ejabberd/sasl.log\\\"\\} \
                   -mnesia dir \\\"/var/lib/ejabberd/spool\\\" \
                   -kernel inetrc \\\"/etc/ejabberd/inetrc\\\" \
                   -detached"
        RETVAL=$?
        [ $RETVAL -eq 0 ] && touch /var/lock/subsys/ejabberd
        echo

	# Ignore the return val of setup_online_srg
	# ==> startup even if the SRG setup had errors.
	setup_online_srg

        return $RETVAL
}

stop() {
        # Stop daemons.
        echo -n "Shutting down ejabberd: "
        /sbin/runuser -s /bin/bash - ejabberd -c "erl -pa @libdir@/ejabberd/ebin -noinput -sname ejabberdctl -s ejabberd_ctl -extra ejabberd@$node stop" && success || failure
        RETVAL=$?
        [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/ejabberd
        echo
        return $RETVAL
}

restart() {
        stop
	sleep 5
        start
}

# See how we were called.
case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart)
        restart
        ;;
  force-reload)
	restart
	;;
  condrestart)
        [ -f /var/lock/subsys/ejabberd ] && restart || :
        ;;
  try-restart)
        [ -f /var/lock/subsys/ejabberd ] && restart || :
        ;;
  status)
        /sbin/runuser -s /bin/bash - ejabberd -c "erl -pa @libdir@/ejabberd/ebin -noinput -sname ejabberdctl -s ejabberd_ctl -extra ejabberd@$node status"
        ;;
  *)
        echo "Usage: ejabberd {start|stop|restart|force-reload|condrestart|try-restart|status}"
        exit 1
esac

exit $?


