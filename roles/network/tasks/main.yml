# WAN Discover only do we have a gateway?
- name: Found gateway
  set_fact:
    discovered_wan_iface: "{{ ansible_default_ipv4.alias }}"
  when: 'xsce_wan_iface == "auto" and ansible_default_ipv4.gateway is defined'

- name: no detected gateway
  set_fact:
    discovered_wan_iface: "none"
  when: not ansible_default_ipv4.gateway is defined

# picks up auto, none, blah in vars/ default would be auto
- name: Clone user configured WAN fact from vars/
  set_fact:
    user_wan_iface: "{{ xsce_wan_iface }}"
    when: 'xsce_wan_iface != ""'

# user disabled interface
- name: checking xsce_wan_enabled
  set_fact:
    user_wan_iface: "none"
  when: 'not xsce_wan_enabled' 

# default is auto if unchanged in vars/
- name: Setting detected gateway
  set_fact:
    xsce_wan_iface: "{{ discovered_wan_iface }}"
  when: xsce_wan_iface == "auto"

# override with user_wan_iface setting if no longer in auto
- name: setting user WAN fact
  set_fact:
    xsce_wan_iface: "{{ user_wan_iface }}"
  when: 'user_wan_iface != "auto"'

# LAN - Detection only
- name: Discover LAN iface
  shell: "/sbin/ip link show | grep -v -e DOWN -e lo -e tun -e {{ xsce_wan_iface }}| grep mtu | gawk -F: '{print $2}' | tr -d ' ' | head -n1 "
  register: discovered_lan
  ignore_errors: True
  changed_when: false

# can return ""
- name: Set xsce discovered lan fact
  set_fact:
    discovered_lan_iface: "{{ discovered_lan.stdout }}"
  when: 'xsce_lan_iface == "auto" and discovered_lan is defined'

# picks up auto, none, blah in vars/ default would be auto
- name: Clone user configured LAN fact from vars/
  set_fact:
    user_lan_iface: "{{ xsce_lan_iface }}"
  when: 'xsce_lan_iface != ""'

# user disabled interface set to ""
- name: checking xsce_lan_enabled
  set_fact:
    user_lan_iface: ""
  when: not xsce_lan_enabled

# default is auto if unchanged in vars/ can be ""
- name: Setting detected lan
  set_fact:
    xsce_lan_iface: "{{ discovered_lan_iface }}"
  when: 'xsce_lan_iface == "auto"'

# override with user_wan_iface setting if no longer in auto
- name: setting user LAN fact
  set_fact:
    xsce_lan_iface: "{{ user_lan_iface }}"
  when: 'user_lan_iface != "auto"'

- name: No LAN configured - Appliance mode
  set_fact:
    dansguardian_enabled: False
    squid_enabled: False
    named_enabled: False
    dhcpd_enabled: False
    wondershaper_enabled: False
    xsce_network_mode: "Appliance"
  when: 'xsce_lan_iface == "" and xsce_wan_iface != "none"'

- name: LAN configured - LanController mode
  set_fact:
    named_enabled: True
    dhcpd_enabled: True
    dansguardian_enabled: False
    squid_enabled: False
    wondershaper_enabled: False
    xsce_network_mode: "LanController"
  when: 'xsce_lan_iface != "" and xsce_wan_iface == "none"'

- name: LAN configured - Gateway mode
  set_fact:
    named_enabled: True
    dhcpd_enabled: True
    xsce_network_mode: "Gateway"
  when: 'xsce_lan_iface != "none" and xsce_wan_iface != "none"'

- name: Add location section to config file
  ini_file: dest='{{ xsce_config_file }}'
            section=network
            option='{{ item.option }}'
            value='{{ item.value }}'
  with_items:
  - option: 'wan_enabled'
    value: '{{ xsce_wan_enabled }}'
  - option: 'lan_enabled'
    value: '{{ xsce_lan_enabled }}'
  - option: 'detected_gateway'
    value: '{{ discovered_wan_iface }}'
  - option: 'detected_lan'
    value: '{{ discovered_lan_iface }}'
  - option: 'user_gateway'
    value: '{{ user_wan_iface }}'
  - option: 'user_lan'
    value: '{{ user_lan_iface }}'
  - option: 'computed_gateway'
    value: '{{ xsce_wan_iface }}'
  - option: 'computed_lan'
    value: '{{ xsce_lan_iface }}'
  - option: 'xsce_network_mode'
    value: '{{ xsce_network_mode }}'

- name: Create xs network flags
  template: backup=yes
            src={{ item }}.j2
            dest=/etc/sysconfig/{{ item }}
            mode=0644
  with_items:
    - xs_wan_device
    - xs_lan_device
    - xs_domain_name
  tags:
    - network-discover

- name: Configure /etc/sysconfig/network
  template: backup=yes
            src=sysconfig.network.j2
            dest=/etc/sysconfig/network
            owner=root
            group=root
            mode=0644

#TODO: Use vars instead of hardcoded values
- name: Configure /etc/hosts
  lineinfile: backup=yes
              dest=/etc/hosts
              regexp='^172\.18\.96\.1'
              line='172.18.96.1            {{ xsce_hostname }}.{{ xsce_domain }}      {{ xsce_hostname }}'
              owner=root
              group=root
              mode=0644

- name: Configure /etc/hosts
  lineinfile: backup=yes
              dest=/etc/hosts
              regexp='^127\.0\.0\.1'
              line='127.0.0.1            localhost.localdomain   localhost   {{ xsce_hostname }}'
              owner=root
              group=root
              mode=0644


- name: Configure lan interface
  template: backup=yes
            src=ifcfg.j2
            dest=/etc/sysconfig/network-scripts/ifcfg-{{xsce_lan_iface}}
  when: 'xsce_lan_iface != "" '

# This is a dog's breakfast, but with ansible 1.6.3 service: name=NetworkManager state=restarted doesn't work

- name: restart NetworkManager services
  service: name=NetworkManager
           enabled=yes
           state=stopped
- service: name=NetworkManager-dispatcher
           enabled=yes
           state=stopped
- wait_for: path=/etc/passwd
            delay=4
            timeout=5
- service: name=NetworkManager
           enabled=yes
           state=started
- wait_for: path=/etc/passwd
            delay=4
            timeout=5
- service: name=NetworkManager-dispatcher
           enabled=yes
           state=started
- debug:  msg="hopefully now NM is restarted"

- include: named.yml
  tags:
    - named
    - network
