#!/bin/bash
# tools to create, manage, simplify services and modules on XS server
PLUGINS_DIR=plugins.d
CHILD=`ls | grep plugins.d`
if [ ! $CHILD = $PLUGINS_DIR ]; then
    echo "These school server developer tools must be run from $PLUGINS_DIR's parent"
    exit 2
fi
CURDIR=`pwd`
DIRECTORY_MAKEFILE=$CURDIR/$PLUGINS_DIR/Makefile

#=================================================================================
#functions to make the big case statement more understandable

function  generate_directories()
# first make a list of the manifest files for all plugins
{
    echo "made it to generate_directories"
    rm -f $DIRECTORY_MAKEFILE
    # scan through all the files in the plugin tree, and create the directories
    # use an array to eliminate duplicates
    for plugin in `find $PLUGINS_DIR/ -maxdepth 1 -type d | sed s:$PLUGINS_DIR/::`; do
        cd plugins.d/$plugin
        echo "$PWD/$plugin.manifest"
        if [ -f ./$plugin.manifest ]; then
            manlist+=" plugins.d/$plugin/$plugin.manifest"
            # make list of files for later use
            echo `find ./files/ | sed s:./files/::` > $plugin.find
        fi
        cd $CURDIR
    done

    echo "install:" >>$MKDIR_MAKEFILE

    # now feed all of these files, or connectors, to gawk to find unique path names
    cat $manlist | \
    gawk  -v mkfile=$MKDIR_MAKEFILE '
    {
        line = $0
        for (i in nibbles) {delete nibble[i]}
        print $0
        directories[0]=""
        num = split($0,nibbles,"/")
        path = ""
        for (i=1; i<num; i++){
            path = path nibbles[i] "/"
            if (!( path in directories)) {
                write_directory(path, mkfile, directories)
            }
        }
        add_leaf_directories($nibbles[i-1], manfile, mkfile, directories)


    }

    function add_leaf_directories(connector, manifest_path, mkfile, directories){
        match(manifest_path,/.*\//)
        if (RLENGTH > 0){
            find_file_data = sprintf("%s/%s",substr(manifest_path,1,RLENGTH),"files")
            print ("find_file_data: ", find_file_data)
            while ((getline line < find_file_data) > 0) {
                print(line)
                split(line, nibbles, "/")
                split(connector, parents, "/")
                if (nibbles[1] == parents[length(parents)]){
                    full_path = "/"
                    for (i in connector) {
                        full_path += connector[i] "/"
                    }
                    for (i=2; i<=length(nibbles); i++){
                        full_path += nibbles[i] "/"
                    }

                    if (!( full_path in directories)) {
                        write_directory(full_path, mkfile, directories)
                    }
                }
            }
        }
   }

   function write_directory(path, mkfile, directories){
        makef = sprintf("\tinstall -D -d  \044(DESTDIR)%s",path)
        cmd = sprintf("echo '\''%s'\'' >> %s", makef, mkfile)
           #print(cmd "  " path)
        system(cmd)
        directories[path]=""
    }
    '
}

#=================================================================================
function make_makefile_for_plugin()
{
        cd plugins.d/$plugin
        rm -f Makefile
        echo "install:" >> Makefile
        #echo `cat $plugin.manifest `
        if [ -f $mod.manifest ]; then
            cat $mod.manifest | gawk -v pluginloc=$mod '{
            ar[0] = ""
            num = split($0,ar,"/")
            path = ""
            for (i=1; i<num; i++){
                path = path ar[i] "/"
            }
            makef = sprintf("\tinstall -D files/%s \044(DESTDIR)%s",ar[num],path )
            cmd = sprintf("echo '\''%s'\'' >> ~/dextrose/xs-config/plugins.d/%s/Makefile",makef,pluginloc)
            system(cmd)
            print(cmd)}'
        fi
        cd $curdir
}

#=================================================================================
function extract_directory_list_from_files()
# first get a list of connec
{
    FILELIST=`find .`
}
#=================================================================================
case "$1" in
"mktree")
# Read plugin name from 2nd parameter and create plugin tree
	for mod in $2; do
		mkdir -p plugins.d/$mod
		pushd plugins.d/$mod
		mkdir -p yum files
		touch $mod.sh Makefile $mod.manifest $mod.README
        chmod 755 $mod.sh
		popd
	done
	;;
"yum")
# echo the yum modules in all the plugins
        for mod in `ls plugins.d`; do
                echo `ls -1 plugins.d/$mod/yum/`
        done
        ;;

"functions")
# echo the function names (*.sh) in the plugin tree
        curdir=`pwd`
        for mod in `ls plugins.d`; do
                cd plugins.d/$mod
                echo `ls -1 *.sh`
                cd $curdir
        done
        ;;

"exec")
# source all the functions in the plugin tree
        curdir=`pwd`
        for mod in `ls plugins.d`; do
                cd plugins.d/$mod
                script=`ls -1 *.sh`
                if [ ! -z $script ]; then
                    source "./$script"
                fi
                cd $curdir
        done
        ;;
"savetree")
# copy the plugin tree to ../plugins.d.backup, or 2nd parameter
        target=../plugins.d.backup
        if [ $# = 1 ]; then
            target=$1
        fi
        mkdir -p $target
        cp -rp ./plugins.d/* $target
        ;;
"restoretree")
# copy the plugin tree from ../plugins.d.backup, or 2nd parameter to ./plugins.test
        source=../plugins.d.backup
        if [ $# = 1 -a -d $1 ]; then
            source=$1
        fi
        mkdir -p ./plugins.test
        cp -rp $source/* ./modules.test
        ;;
"git2linux")
# use make install to extract the current git branch to a tree
# to 2nd param or ../linuxtree if no 2nd param
        target=../linuxtree
        if [ $# = 1 ];then
            target=../$1
        fi
        export DESTDIR=$target
        mkdir -p $target
        make -e install
        ;;
"mkmake")
# use contents of "plugins.d/files" to generate Makefiles in each plugin
    MKDIR_MAKEFILE=$CURDIR/$PLUGINS_DIR/Makefile
	if [ $# -eq 2 -a $2 = "all" ]; then
		PLUGIINS=`ls -d plugins.d`
    fi
	if [ $# -eq 2 -a $2 != "all" ]; then
		PLUGINS=$2
	fi
	if [ $# -eq 1 ]; then
		PLUGINS=`cat m_manifest`
	fi
    echo "about to generate_directories"
    generate_directories
	for plugin in $PLUGINS; do
        make_makefile_for_plugin $plugin
    done
    ;;

"tree2plugins.d")
# input is list of files (find BUILDROOT with plugin name added),
# param1=treeroot output is files copied to ./files, manifest written
# usage: cat <find / of root> | xsc_tools tree2plugins.d ../linuxtree
    gawk  'BEGIN { RS = "\r" }
    {
    treeloc = "../linuxtree"
    src = $1
    tree = $1
    sub(/\./,"",tree)
    sub(/\./,"",src)
    if ($2 != ""){
        line = sprintf("cp %s%s plugins.d/%s/files/",treeloc,tree,$2)
        print( line )
        system(line)
        addline = sprintf("echo '%s' >> plugins.d/%s/%s.manifest",tree,$2,$2)
        print(addline)
        system(addline)
    }
    }' $2
    ;;

"treediff")
    diff -r . ~/dextrose/linuxtree
    ;;
*)
	ls  plugins.d
	;;
esac
