# The preferred method of disabling the LAN would be to set xsce_lan_enabled:
# False before getting here but we are here...
# Well if we got here something changed with the gateway and ifcfg-WAN maybe 
# no longer accurate. Note if DEVICE= is any ifcfg files the listed DEVICE 
# becomes bound to the NAME in the ifcfg file. With the LAN files out of the 
# way we can try the interfaces one by one starting with device_gw.

# Setting up three way conditions with the results
# skipped|changed|failed
# failure results in blowing away the ifcfg-WAN so lets make sure...  

# We only got here by way of no detected gateway, lets see if we can pick-up 
# transient change like cable issues.  

# don't shoot ourselves in the foot....
- name: Disable dhcp server just because
  service: name=dhcpd state=stopped

### clear all connections first
# We should have the LAN torndown at this point. 

- name: Trying ifcfg-WAN first
  shell: nmcli conn up id xsce-WAN
  register: dhcp_WAN
  ignore_errors: yes
  when: has_WAN == "True"

- pause:

# OK the nic's ifcfg matches what was last found  
- name: Got an ip from dhcp-WAN finding DEVICE
  shell: sleep 2 | ip route | grep default | awk '{print $5}'
  register: dhcp_WAN_results
  when: dhcp_WAN is defined and dhcp_WAN|changed

- name: Now setting xsce_wan_iface via ifcfg-WAN
  set_fact: 
     xsce_wan_iface: "{{ dhcp_WAN_results.stdout }}"
     dhcp_good: True
  when: dhcp_WAN_results.stdout is defined and dhcp_WAN_results.stdout != ""

### end of easy test...

# we should never get here on a first pass with the other two methods in play
# but the file could get deleted so we need to know the raw interfaces names 
# and count
#- name: No ifcfg-WAN response
#  debug: msg="NO WAN response"
#  when: not dhcp_WAN is defined

- name: No ifcfg-WAN known
  debug: msg="NO WAN known"
  when: has_WAN == "False"

# this should stub out and be used for the failure noted, but after we figure
# out what to do with the ifcfg-WAN file. That is last for now.

- name: Try dhcp accoss all wired devices 
  shell: nmcli d connect "{{ item|trim }}"
  when: item|trim != discovered_wireless_iface and has_WAN == "False"
  with_items:
      - "{{ lan_list_result.stdout_lines }}"

# This should be neat on a VM with 2 bridged interfaces.
- name: Checking for gateway
  shell: sleep 5 | ip route | grep default | awk '{print $5}'
  register: dhcp_1BY1_results
  when: has_WAN == "False"

# We have the DEVICE?
- name: Now setting xsce_wan_iface via nmcli
  set_fact: 
     xsce_wan_iface: "{{ dhcp_1BY1_results.stdout }}"
     dhcp_good: True
  when: dhcp_1BY1_results.stdout is defined and dhcp_1BY1_results.stdout != "" and has_WAN == "False"

# the default of none results in using create_ifcfg.yml or edit_ifcfg next 
# based on present of ifcfg-DEVICE just have to set has_ifcfg_gw to replace 
# what was in detected in 1-prep 

- name: Find gateway config based on device
  shell: "egrep -rn {{ xsce_wan_iface }} /etc/sysconfig/network-scripts/ifcfg* | gawk -F ':' '{print $1}'"
  register: ifcfg_dhcp_device
  ignore_errors: True
  changed_when: False
  when: dhcp_good

- name: Setting has_ifcfg_gw based on device if found
  set_fact:
    has_ifcfg_gw: "{{ item|trim }}"
  when: ifcfg_dhcp_device.stdout_lines is defined and item|trim != ""
  with_items:
      - "{{ ifcfg_dhcp_device.stdout_lines }}"

# depending on if a plugin for NM, we might have to handle 
# taredown differently with 'c delete' and with 'd disconnect'

- name: Now delete the ifcfg via nmcli
  shell: nmcli c delete "{{ xsce_wan_iface }}"
  ignore_errors: yes
  when: has_WAN == "False"

#### to do next have to see if there is wifi info in it first
- name: BAD ifcfg-WAN
  debug: msg="BAD WAN"
  when: dhcp_WAN is defined and dhcp_WAN|failed
- pause:
#### move up later

# so this works
- name: interface count
  shell: ls /sys/class/net | grep -v -e lo | wc | awk '{print $1}'
  register: adapter_count

# well if there ever was a point to tell the user thing are FUBAR this is it.
#- name: We're hosed no work interfaces
#  do some thing here. 
#  when: adapter_count.stdout == "0"

- name: interface list
  shell: ls /sys/class/net | grep -v -e lo
  register: adapter_list
- debug: msg="{{adapter_list}}"

### keep at end.
### If dhcp fails the single interface will become LAN again because we didn't prevent the creation
# Now disable LAN if single interface
- name: Single interface forcing LAN disabled.
  set_fact:
     xsce_lan_iface: "none"
  when: dhcp_good is defined and dhcp_good == "True" and adapter_count.stdout == "1"
- pause:
